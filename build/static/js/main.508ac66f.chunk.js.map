{"version":3,"sources":["Header.js","RegistrationForm.js","Content.js","index.js"],"names":["Header","id","className","href","src","alt","makeStyles","root","display","width","backgroundColor","test","color","props","MuiInputBase","required","fontSize","fontWeight","paddingTop","paddingBottom","border","boxSizing","theme","button","KeyPair","CTA","target","type","name","value","Header1","state","formData","email","companyname","vaspcode","countrycode","vaspapi","submitted","handleChange","event","setState","handleSubmit","setTimeout","this","ref","onSubmit","FormHelperText","placeholder","InputLabelProps","shrink","onChange","validators","errorMessages","FormControl","variant","select","inputProps","MenuItem","citypcode","companyid","vip_address","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.508ac66f.chunk.js","sourcesContent":["import React from 'react';\nimport './styles/header.scss';\n\nfunction Header() {\n  return (\n    <div id=\"header\">\n        <div className=\"container\">\n          <div className=\"logo\">\n            <a href=\"index.html\">\n              <img\n                src=\"https://6tzs95ygc93ndarqhl8fkg-on.drv.tw/SYGNABridge_mail/images/logo.png\"\n                alt=\"SYGNA Bridge\" />\n            </a>\n          </div>\n        </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import 'date-fns';\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport './styles/form.scss';\nimport Button from '@material-ui/core/Button';\n/* eslint-enable */\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\n\n//像 class 一樣可存在多個於js檔裡\n//適合客製化 / 增加不同元素\n\nconst testStyles = makeStyles({\n  root: {\n    display: 'inline-block',\n    width: '50%',\n    backgroundColor: '#e9eee9',\n    '.test': {\n      backgroundColor: '#0404',\n    },\n  },\n  test: {\n    color: '#222b45',\n  }\n});\n\nconst inputStyles = makeStyles({\n  root: {\n    // width: '100%',\n  },\n  props: {\n    // required: true,\n    // Name of the component ⚛️\n    MuiInputBase: {\n      // The default props to change\n      color: '#6600cc',\n      required: true,\n    },\n  },\n});\n\nconst selectStyle = makeStyles({\n  root: {\n    fontSize: '15px',\n    color: '#222b45',\n    fontWeight: '600',\n    paddingTop: '14px',\n    paddingBottom: '14px',\n    border: '1px solid #c5cee0',\n    backgroundColor: '#f7f9fc',\n    boxSizing: 'border-box',\n  },\n});\n\nconst usStyles = makeStyles(theme => ({\n  root: {\n    button: {\n      fontSize: '40px',\n      backgroundColor: '#6600cc',\n    },\n  },\n}));\n\nconst divStyle = {\n  width: 'auto',\n  fontSize: '15px',\n    color: '#222b45',\n    fontWeight: '600',\n    paddingTop: '14px',\n    paddingBottom: '14px',\n    border: '1px solid #c5cee0',\n    backgroundColor: '#f7f9fc',\n    boxSizing: 'border-box',\n};\n\n// input\nfunction Email() {\n  const classes = [inputStyles(), usStyles()];\n  return (\n    <div>\n      <FormHelperText>Your valid email address.</FormHelperText>\n      <TextField id=\"Email\" placeholder=\"Input mail address\" \n      InputLabelProps={{ shrink: true }}\n      type=\"mail\" style={divStyle}\n        helperText=\"Incorrect entry.\" />\n    </div>\n  );\n}\n// select\nfunction CountryCode() {\n  const classes = selectStyle();\n  const [CountryCode, setCountryCode] = React.useState('');\n  const handleChange = (event) => {\n    setCountryCode(event.target.value);\n  };\n  return (\n    <FormControl variant=\"outlined\">\n      <FormHelperText>Country location of your company jurisdiction. Please follow ISO 3166-1 alpha-2 country code.</FormHelperText>\n      <Select labelId=\"country-code-label\" id=\"country-code\" value={CountryCode} onChange={handleChange} displayEmpty \n        inputProps={{ 'aria-label': 'Without label' }}\n        classes={{ root: classes.root, option: classes.option, }}>\n        <MenuItem value=\"\">Select</MenuItem>\n        <MenuItem value={1}>Virtual/Flat</MenuItem>\n        <MenuItem value={2}>Virtual/Virtual</MenuItem>\n        <MenuItem value={3}>Transfer</MenuItem>\n        <MenuItem value={4}>Custodian</MenuItem>\n        <MenuItem value={5}>Other</MenuItem>\n      </Select>\n    </FormControl>\n  );\n}\n\nfunction KeyPair() {\n  return (\n    <div className=\"info\">\n      <h6>Key pair generation</h6>\n      <p>\n        This short guide will help you to generate a key pair via the OpenSSL command line tool, in order to\n        provide the public key to Bridge.\n        <br /><br />\n        Generate an EC private key, of size 256, and output it to a file named key.pem:\n        >> $ openssl ecparam -name secp256k1 -genkey -out key.pem\n        <br /><br />\n        Extract the public key from the key pair, which can be used in the encryption:\n        >> $ openssl ec -in key.pem -pubout -out public.pem\n        <br /><br />\n        After running these two commands you will generate two files: key.pem and public.pem in your working\n        directory. Please provide us with the public.pem\n        key.pem is referenced in the creation of a digital signature on the message. Please take care not to\n        expose the private key. Ensure that you only do so on a system you consider to be secure.\n      </p>\n    </div>\n  );\n}\n\nfunction CTA() {\n  return (\n    <div className=\"cta_block\">\n      <p className=\"text\">\n        If you have any questions with the information in this email, please let us know at <a href=\"mailto:contact@sygna.io\">contact@sygna.io</a> or visit our website at <a href=\"sygna.io\"\n        target=\"_blank\">sygna.io</a>\n      </p>\n      <div className=\"cta\">\n        <input type=\"submit\" name=\"\" value=\"Submit\" className=\"btn btn-primary\" />\n      </div>\n    </div>\n  );\n}\n\n\n//什麼都不講的狀況下會選 default 引入，像 id 一樣只能存在一個於js檔裡\n//適合做基礎樣式\nexport default class Header1 extends React.Component {\n  state = {\n    formData: {\n        email: '',\n        companyname: '',\n        vaspcode: '',\n        countrycode: '',\n        vaspapi: '',\n    },\n    submitted: false,\n  }\n\n  handleChange = (event) => {\n    const { formData } = this.state;\n    formData[event.target.name] = event.target.value;\n    this.setState({ formData });\n  }\n\n  handleSubmit = () => {\n    this.setState({ submitted: true }, () => {\n        setTimeout(() => this.setState({ submitted: false }), 5000);\n    });\n  }\n  render() {\n    const { formData, submitted } = this.state;\n    return (\n      <div className=\"container\">\n        <div className=\"intro\">\n          <h2 className=\"title\">Welcome to Sygna Bridge VASP Registration</h2>\n        </div>\n        <ValidatorForm id=\"registration_form\"\n              ref=\"form\"\n              onSubmit={this.handleSubmit}\n        > \n          <div className=\"input-field required\">\n            <h5>Email Address</h5>\n            <FormHelperText>Your valid email address.</FormHelperText>\n            <TextValidator id=\"Email\" placeholder=\"Input mail address\" \n              InputLabelProps={{ shrink: true }}\n              type=\"mail\" \n              onChange={this.handleChange}\n              name=\"email\"\n              value={formData.email}\n              validators={['required', 'isEmail']}\n              errorMessages={['This field is required', 'Email is not valid']} \n            />\n          </div>\n          <div className=\"input-field required\">\n            <h5>Company Name</h5>\n            <FormHelperText>Your registered company name. Example: \"VASP LTD.\"</FormHelperText>\n            <TextValidator id=\"CompanyName\" placeholder=\"Your company name\" \n              InputLabelProps={{ shrink: true }}\n              type=\"text\"\n              onChange={this.handleChange}\n              name=\"companyname\"\n              value={formData.companyname}\n              validators={['required', 'isString']}\n              errorMessages={['This field is required', 'Company name is not valid']} \n            />\n          </div>\n          <div className=\"input-field required\">\n            <h5>VASP Code Name</h5>\n            <FormHelperText>4 uppercase letters to represent your company name. Example: \"Coinbase exchange\" could be \"CBSE\", \"Sygna\" could be \"SYGN\"</FormHelperText>\n            <TextValidator id=\"VASPCodeName\" placeholder=\"Input VASP code Name\"\n              InputLabelProps={{ shrink: true }}\n              type=\"text\" \n              onChange={this.handleChange}\n              name=\"vaspcode\"\n              value={formData.vaspcode}\n              validators={['required', 'isString']}\n              errorMessages={['This field is required', 'VASP code name is not valid']} \n            />\n          </div>\n          <div className=\"input-field required\">\n            <h5>Country Code</h5>\n            <FormControl variant=\"outlined\">\n              <FormHelperText>Country location of your company jurisdiction. Please follow ISO 3166-1 alpha-2 country code.</FormHelperText>\n              <TextValidator select id=\"CountryCode\" value={formData.countrycode.value} onChange={this.handleChange}  \n                inputProps={{ 'aria-label': 'Without label' }} className=\"selectStyle\" placeholder={formData.countrycode.test}\n              >\n                <MenuItem test>Select</MenuItem>\n                <MenuItem value={1}>Virtual/Flat</MenuItem>\n                <MenuItem value={2}>Virtual/Virtual</MenuItem>\n                <MenuItem value={3}>Transfer</MenuItem>\n                <MenuItem value={4}>Custodian</MenuItem>\n                <MenuItem value={5}>Other</MenuItem>\n              </TextValidator>\n            </FormControl>\n          </div>\n          <div className=\"input-field required\">\n            <h5>City Code</h5>\n            <FormHelperText>2 letters city abbreviation. Example: \"NY\"</FormHelperText>\n            <TextValidator id=\"CityCode\" placeholder=\"Input city code\"\n              InputLabelProps={{ shrink: true }}\n              type=\"text\" \n              onChange={this.handleChange}\n              name=\"citycode\"\n              value={formData.citypcode}\n              validators={['required', 'isString', 'minStringLength: 2', 'maxStringLength: 2']}\n              errorMessages={['This field is required', 'City code is not valid']} \n            />\n          </div>\n          <div className=\"input-field\">\n            <h5>Company ID</h5>\n            <FormHelperText>Company registration code under local jurisdiction.</FormHelperText>\n            <TextValidator id=\"CompanyID\" placeholder=\"Input company ID\"\n              InputLabelProps={{ shrink: true }}\n              type=\"text\" \n              onChange={this.handleChange}\n              name=\"company_id\"\n              value={formData.companyid}\n            />\n          </div>\n          <div className=\"input-field required\">\n            <h5>Beneficiary VASP API endpoint URL</h5>\n            <FormHelperText>API endpoint for beneficiary VASP to receive API request from Bridge Server (<a href=\"http://bit.ly/2NhZUlS\" target=\"_blank\">http://bit.ly/2NhZUlS</a>).\n    Example: \"<a href=\"#\" target=\"_blank\">beneficiary.example/api/v1/bridge/transaction/permission-request</a></FormHelperText>\n            <TextValidator id=\"VASPapi\" placeholder=\"Input beneficiary VASP API endpoint URL\"\n              InputLabelProps={{ shrink: true }}\n              type=\"text\" \n              onChange={this.handleChange}\n              name=\"vaspapi\"\n              value={formData.vaspapi}\n            />\n          </div>\n          <div className=\"input-field\">\n            <h5>Fixed static IP Address</h5>\n            <FormHelperText>To create a secure communication tunnel between Bridge and VASP servers, Bridge can register VASP server static IP for identification. (optional)</FormHelperText>\n            <TextValidator id=\"VIPAddress\" placeholder=\"Input fixed static IP address\"\n              InputLabelProps={{ shrink: true }}\n              type=\"text\" \n              onChange={this.handleChange}\n              name=\"vip_address\"\n              value={formData.vip_address}\n            />\n          </div>\n          <div className=\"input-field\">\n            <h5>Go-Live Date</h5>\n            <FormHelperText>Default date: three days after the registration is done.</FormHelperText>\n            <TextValidator id=\"go_live_date\" placeholder=\"YY/MM/DD 00:00\"\n              InputLabelProps={{ shrink: true }}\n              type=\"text\" \n              onChange={this.handleChange}\n              name=\"go_live_date\"\n            />\n          </div>\n          <KeyPair />\n          <CTA />\n        </ValidatorForm>\n      </div>\n    )\n  }\n};\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport RegistrationForm from './RegistrationForm'\n\n\nfunction Content() {\n  return (\n    <Router>\n      <div>\n        <h6>\n          <Link to=\"/index\">Index</Link>\n        </h6>\n        <ul>\n          <li>\n            <Link to=\"/RegistrationForm\">Registration Form</Link>\n          </li>\n        </ul>\n        <hr />\n        <Route path=\"/index\" />\n        <Route path=\"/RegistrationForm\" component={RegistrationForm} />\n      </div>\n    </Router>\n  );\n}\n\nclass Reject extends React.Component {\n  render() {\n    return (\n      <div>\n        <p className=\"reject_reason\">reject reason from account approver\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Content;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Header from './Header'\nimport Content from './Content'\nimport './styles/content.scss';\n// import {Header2} from './RegistrationForm'\nimport Header1 from  './RegistrationForm'\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />\n    <Header1/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}